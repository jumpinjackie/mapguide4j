# mapguide4j-rest Routes
# This file defines all application routes in mapguide4j-rest (Higher priority routes first)
# ~~~~

# NOTE: Most of the routes defined here are modeled on the proposed representations
# from (http://trac.osgeo.org/mapguide/wiki/Future/RESTfulWebServices)
# with some small tweaks to work around the potential ambiguity in route matching

# Home page
GET /                                                               controllers.Application.index()

GET /mapguide/rest                                                  controllers.MgTestController.index()

# mapagent compatibility shim
GET /mapguide/mapagent/mapagent.fcgi                                controllers.MgMapAgentCompatibilityController.processGetRequest()
POST /mapguide/mapagent/mapagent.fcgi                               controllers.MgMapAgentCompatibilityController.processPostRequest()

# Operations
POST /mapguide/rest/operation/createSession                         controllers.MgOperationController.createSession()
POST /mapguide/rest/operation/copyResource                          controllers.MgOperationController.copyResource()

# Library
GET /mapguide/rest/library/*resourcePath/schema/:schemaName/classes             controllers.MgLibraryFeatureServiceController.getClassNames(resourcePath, schemaName: String)
GET /mapguide/rest/library/*resourcePath/schema/:schemaName                     controllers.MgLibraryFeatureServiceController.getFeatureSchema(resourcePath, schemaName: String)
GET /mapguide/rest/library/*resourcePath/schema/:schemaName/:className          controllers.MgLibraryFeatureServiceController.getClassDefinition(resourcePath, schemaName: String, className: String)
GET /mapguide/rest/library/*resourcePath/data/$dataName<^[./]*$>                controllers.MgLibraryResourceServiceController.getResourceData(resourcePath, dataName: String)
DELETE /mapguide/rest/library/*resourcePath/data/$dataName<^[./]*$>             controllers.MgLibraryResourceServiceController.deleteResourceData(resourcePath, dataName: String)
GET /mapguide/rest/library/*resourcePath/data                                   controllers.MgLibraryResourceServiceController.enumerateResourceData(resourcePath)
GET /mapguide/rest/library/*resourcePath/header                                 controllers.MgLibraryResourceServiceController.getResourceHeader(resourcePath)
GET /mapguide/rest/library/*resourcePath/schemas                                controllers.MgLibraryFeatureServiceController.getSchemaNames(resourcePath)
GET /mapguide/rest/library/*resourcePath/spatialcontexts                        controllers.MgLibraryFeatureServiceController.getSpatialContexts(resourcePath)
GET /mapguide/rest/library/*resourcePath/references                             controllers.MgLibraryResourceServiceController.enumerateResourceReferences(resourcePath)
GET /mapguide/rest/library/*resourcePath/content                                controllers.MgLibraryResourceServiceController.getResourceContent(resourcePath)
DELETE /mapguide/rest/library/*resourcePath                                     controllers.MgLibraryResourceServiceController.deleteResource(resourcePath)
GET /mapguide/rest/library/list                                                 controllers.MgLibraryResourceServiceController.enumerateResources(resourcePath = "")
GET /mapguide/rest/library/*resourcePath/list                                   controllers.MgLibraryResourceServiceController.enumerateResources(resourcePath)
GET /mapguide/rest/providers                                                    controllers.MgLibraryFeatureServiceController.getFeatureProviders()
GET /mapguide/rest/providers/:fdoProviderName/capabilities                      controllers.MgLibraryFeatureServiceController.getProviderCapabilities(fdoProviderName: String)
GET /mapguide/rest/providers/:fdoProviderName/datastores                        controllers.MgLibraryFeatureServiceController.enumerateDataStores(fdoProviderName: String)
GET /mapguide/rest/providers/:fdoProviderName/connectvalues/:propName           controllers.MgLibraryFeatureServiceController.getConnectPropertyValues(fdoProviderName: String, propName: String)

# CRUD
GET /mapguide/rest/library/*resourcePath/features/:schemaName/:className        controllers.MgLibraryFeatureServiceController.selectFeatures(resourcePath, schemaName: String, className: String)

# Site
GET /mapguide/rest/site/status                                                  controllers.MgSiteAdminController.getSiteStatus()
GET /mapguide/rest/site/version                                                 controllers.MgSiteAdminController.getSiteVersion()
GET /mapguide/rest/site/groups                                                  controllers.MgSiteAdminController.getGroups()
GET /mapguide/rest/site/user/:userName/groups                                   controllers.MgSiteAdminController.getGroupsForUser(userName: String)
GET /mapguide/rest/site/user/:userName/roles                                   controllers.MgSiteAdminController.getRolesForUser(userName: String)
GET /mapguide/rest/site/groups/:groupName/users                                 controllers.MgSiteAdminController.getUsersForGroup(groupName: String)

# FIXME: MgReadOnlyStream is not implemented correctly. We get an image back, but it's totally garbled
GET /mapguide/rest/library/*resourcePath/basetileimage/:baseLayerGroupName/:scaleIndex/:tileCol,:tileRow    controllers.MgLibraryTileServiceController.getTile(resourcePath, baseLayerGroupName: String, scaleIndex: Long, tileCol: Long, tileRow: Long)

# Session
GET /mapguide/rest/session/$sessionId<([a-zA-Z0-9-]+)>/*resourcePath                             controllers.MgSessionResourceServiceController.getResourceContent(sessionId: String, resourcePath)
GET /mapguide/rest/session/$sessionId<([a-zA-Z0-9-]+)>/*resourcePath/header                      controllers.MgSessionResourceServiceController.getResourceHeader(sessionId: String, resourcePath)
GET /mapguide/rest/session/$sessionId<([a-zA-Z0-9-]+)>/*resourcePath/data                        controllers.MgSessionResourceServiceController.enumerateResourceData(sessionId: String, resourcePath)
GET /mapguide/rest/session/$sessionId<([a-zA-Z0-9-]+)>/*resourcePath/data/$dataName<^[./]*$>     controllers.MgSessionResourceServiceController.getResourceData(sessionId: String, resourcePath, dataName: String)

# Coordinate System
GET /mapguide/rest/coordsys/categories                              controllers.MgCoordinateSystemController.enumerateCategories()
GET /mapguide/rest/coordsys/category/:category                      controllers.MgCoordinateSystemController.enumerateCoordinateSystemsByCategory(category: String)
#GET /mapguide/rest/coordsys/mentor/:mentorCode                      controllers.MgCoordinateSystemController.getCoordinateSystemDefinitionByCode(mentorCode: String)
GET /mapguide/rest/coordsys/mentor/:mentorCode/epsg                 controllers.MgCoordinateSystemController.getEpsgForCoordinateSystemCode(mentorCode: String)
GET /mapguide/rest/coordsys/mentor/:mentorCode/wkt                  controllers.MgCoordinateSystemController.getWktForCoordinateSystemCode(mentorCode: String)
#GET /mapguide/rest/coordsys/mentor/:mentorCode/metersPerUnit/:mpu   controllers.MgCoordinateSystemController.getMetersPerUnitForCoordinateSystemCode(mentorCode: String, mpu: Float)
#GET /mapguide/rest/coordsys/epsg/:epsgCode                          controllers.MgCoordinateSystemController.getCoordinateSystemDefinitionByEpsg(epsgCode: Long)
GET /mapguide/rest/coordsys/epsg/:epsgCode/mentor                   controllers.MgCoordinateSystemController.getCoordinateSystemCodeForEpsg(epsgCode: Long)
GET /mapguide/rest/coordsys/epsg/:epsgCode/wkt                      controllers.MgCoordinateSystemController.getWktForEpsg(epsgCode: Long)
#GET /mapguide/rest/coordsys/epsg/:epsgCode/metersPerUnit/:mpu       controllers.MgCoordinateSystemController.getMetersPerUnitForEpsg(epsgCode: Long, mpu: Float)
GET /mapguide/rest/coordsys/tomentor/*wkt                           controllers.MgCoordinateSystemController.getCoordinateSystemCodeFromWkt(wkt)
GET /mapguide/rest/coordsys/toepsg/*wkt                             controllers.MgCoordinateSystemController.getEpsgFromWkt(wkt)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                               controllers.Assets.at(path="/public", file)
